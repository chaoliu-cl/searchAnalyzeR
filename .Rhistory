standardized_B <- std_search_results(results_B, source_format = "pubmed")
# Add strategy identifiers
standardized_A$strategy <- "Clinical_Terminology"
standardized_B$strategy <- "Patient_Symptom_Focused"
# Detect duplicates within each strategy
dedup_A <- detect_dupes(standardized_A, method = "exact")
dedup_B <- detect_dupes(standardized_B, method = "exact")
cat("Strategy A - Total:", nrow(dedup_A), "Unique:", sum(!dedup_A$duplicate), "Duplicates:", sum(dedup_A$duplicate), "\n")
cat("Strategy B - Total:", nrow(dedup_B), "Unique:", sum(!dedup_B$duplicate), "Duplicates:", sum(dedup_B$duplicate), "\n\n")
# Create combined gold standard for comparison
# In practice, this would be your known relevant articles
# Here we'll create a more sophisticated gold standard based on high-confidence matches
cat("Creating enhanced gold standard...\n")
# High-confidence terms that indicate long COVID relevance
high_confidence_patterns <- c(
"long covid", "post-covid", "post-acute covid", "persistent covid",
"covid sequelae", "long haul", "chronic covid", "post covid syndrome"
)
# Articles that appear in both strategies (high confidence)
overlap_ids <- intersect(dedup_A$id[!dedup_A$duplicate], dedup_B$id[!dedup_B$duplicate])
# Articles with multiple high-confidence patterns in title
multi_pattern_A <- dedup_A[!dedup_A$duplicate, ] %>%
filter(rowSums(sapply(high_confidence_patterns, function(p) grepl(p, tolower(title)))) >= 2) %>%
pull(id)
multi_pattern_B <- dedup_B[!dedup_B$duplicate, ] %>%
filter(rowSums(sapply(high_confidence_patterns, function(p) grepl(p, tolower(title)))) >= 2) %>%
pull(id)
# Combine for gold standard
gold_standard_ids <- unique(c(overlap_ids, multi_pattern_A, multi_pattern_B))
cat("Gold standard created with", length(gold_standard_ids), "high-confidence relevant articles\n")
cat("- Overlap between strategies:", length(overlap_ids), "articles\n")
cat("- Strategy A multi-pattern matches:", length(multi_pattern_A), "articles\n")
cat("- Strategy B multi-pattern matches:", length(multi_pattern_B), "articles\n\n")
# Initialize analyzers for both strategies
cat("Initializing SearchAnalyzers for comparison...\n")
analyzer_A <- SearchAnalyzer$new(
search_results = filter(dedup_A, !duplicate),
gold_standard = gold_standard_ids,
search_strategy = strategy_A
)
analyzer_B <- SearchAnalyzer$new(
search_results = filter(dedup_B, !duplicate),
gold_standard = gold_standard_ids,
search_strategy = strategy_B
)
# Calculate comprehensive metrics for both strategies
cat("Calculating performance metrics...\n")
metrics_A <- analyzer_A$calculate_metrics()
metrics_B <- analyzer_B$calculate_metrics()
# Compare strategies using the comparison framework
cat("Performing statistical comparison...\n")
unique_A_ids <- filter(dedup_A, !duplicate)$id
unique_B_ids <- filter(dedup_B, !duplicate)$id
comparison_result <- compare_strategies(
strategy1_results = unique_A_ids,
strategy2_results = unique_B_ids,
gold_standard = gold_standard_ids,
test_type = "mcnemar"
)
# Display comprehensive comparison results
cat("\n=== COMPREHENSIVE STRATEGY COMPARISON RESULTS ===\n\n")
cat("STRATEGY A (Clinical Terminology) PERFORMANCE:\n")
cat("Total Articles Retrieved:", nrow(filter(dedup_A, !duplicate)), "\n")
if (!is.null(metrics_A$precision_recall$precision)) {
cat("Precision:", round(metrics_A$precision_recall$precision, 3), "\n")
cat("Recall:", round(metrics_A$precision_recall$recall, 3), "\n")
cat("F1 Score:", round(metrics_A$precision_recall$f1_score, 3), "\n")
cat("Number Needed to Read:", round(metrics_A$precision_recall$number_needed_to_read, 1), "\n")
}
cat("\nSTRATEGY B (Patient/Symptom-Focused) PERFORMANCE:\n")
cat("Total Articles Retrieved:", nrow(filter(dedup_B, !duplicate)), "\n")
if (!is.null(metrics_B$precision_recall$precision)) {
cat("Precision:", round(metrics_B$precision_recall$precision, 3), "\n")
cat("Recall:", round(metrics_B$precision_recall$recall, 3), "\n")
cat("F1 Score:", round(metrics_B$precision_recall$f1_score, 3), "\n")
cat("Number Needed to Read:", round(metrics_B$precision_recall$number_needed_to_read, 1), "\n")
}
cat("\nSTATISTICAL COMPARISON RESULTS:\n")
cat("Test Used:", comparison_result$test, "\n")
cat("P-value:", round(comparison_result$p_value, 4), "\n")
cat("Statistically Significant:", comparison_result$significant, "\n")
if (!is.null(comparison_result$difference)) {
cat("\nPERFORMANCE DIFFERENCES (B - A):\n")
cat("Precision Difference:", round(comparison_result$difference$precision_diff, 3), "\n")
cat("Recall Difference:", round(comparison_result$difference$recall_diff, 3), "\n")
cat("F1 Score Difference:", round(comparison_result$difference$f1_diff, 3), "\n")
}
# Analyze overlap and unique contributions
cat("\nOVERLAP ANALYSIS:\n")
total_unique_combined <- length(union(unique_A_ids, unique_B_ids))
overlap_count <- length(intersect(unique_A_ids, unique_B_ids))
unique_to_A <- length(setdiff(unique_A_ids, unique_B_ids))
unique_to_B <- length(setdiff(unique_B_ids, unique_A_ids))
cat("Total Unique Articles (Combined):", total_unique_combined, "\n")
cat("Overlap Between Strategies:", overlap_count, "\n")
cat("Unique to Strategy A:", unique_to_A, "\n")
cat("Unique to Strategy B:", unique_to_B, "\n")
cat("Overlap Percentage:", round((overlap_count / total_unique_combined) * 100, 1), "%\n")
# Create enhanced visualizations for comparison
cat("\nGenerating comparative visualizations...\n")
# 1. Side-by-side performance overview
overview_A <- analyzer_A$visualize_performance("overview") +
ggtitle("Strategy A: Clinical Terminology") +
theme(plot.title = element_text(size = 12))
overview_B <- analyzer_B$visualize_performance("overview") +
ggtitle("Strategy B: Patient/Symptom-Focused") +
theme(plot.title = element_text(size = 12))
combined_overview <- overview_A + overview_B +
plot_annotation(title = "Search Strategy Performance Comparison",
subtitle = "Long COVID Search Strategies")
print(combined_overview)
# 2. Temporal comparison
temporal_A <- analyzer_A$visualize_performance("temporal") +
ggtitle("Strategy A: Temporal Distribution") +
theme(plot.title = element_text(size = 12))
pubmed <- PubMedConnector$new()
search_data <- data.frame(
id = paste0("art", 1:100),
title = paste("Article", 1:100),
abstract = paste("Abstract for article", 1:100),
source = "PubMed",
date = Sys.Date() - sample(1:365, 100, replace = TRUE)
)
gold_standard <- paste0("art", sample(1:100, 20))
analyzer <- SearchAnalyzer$new(
search_results = search_data,
gold_standard = gold_standard
)
analyzer
# Load required packages
library(searchAnalyzeR)
library(rentrez)  # For PubMed API access
library(xml2)     # For XML parsing
library(dplyr)
library(ggplot2)
library(lubridate)
library(patchwork)  # For combining plots
# Set up the comparative analysis
cat("=== searchAnalyzeR: Search Strategy Comparison Example ===\n")
cat("Topic: Long-term effects of COVID-19 (Long COVID)\n")
cat("Objective: Compare two semantically related search strategies\n\n")
# Define two different search strategies for comparison
strategy_A <- list(
name = "Clinical Terminology Strategy",
terms = c(
"post-covid syndrome",
"covid-19 sequelae",
"post-acute covid-19",
"long haul covid",
"covid long haulers"
),
description = "Uses formal clinical terminology and established medical terms",
databases = c("PubMed"),
date_range = as.Date(c("2020-01-01", "2024-12-31")),
filters = list(
language = "English",
article_types = c("Journal Article", "Review", "Clinical Trial")
),
search_date = Sys.time()
)
strategy_B <- list(
name = "Patient/Symptom-Focused Strategy",
terms = c(
"long covid",
"persistent covid symptoms",
"chronic covid symptoms",
"post covid fatigue",
"covid recovery complications"
),
description = "Uses patient-centered language and symptom-based terminology",
databases = c("PubMed"),
date_range = as.Date(c("2020-01-01", "2024-12-31")),
filters = list(
language = "English",
article_types = c("Journal Article", "Review", "Clinical Trial")
),
search_date = Sys.time()
)
cat("Strategy A (Clinical Terminology):\n")
cat("Terms:", paste(strategy_A$terms, collapse = " OR "), "\n")
cat("Description:", strategy_A$description, "\n\n")
cat("Strategy B (Patient/Symptom-Focused):\n")
cat("Terms:", paste(strategy_B$terms, collapse = " OR "), "\n")
cat("Description:", strategy_B$description, "\n\n")
# Execute searches for both strategies
cat("=== EXECUTING STRATEGY A: Clinical Terminology ===\n")
results_A <- search_pubmed(
search_terms = strategy_A$terms,
max_results = 150,
date_range = strategy_A$date_range
)
cat("\nStrategy A completed. Retrieved", nrow(results_A), "articles.\n\n")
cat("=== EXECUTING STRATEGY B: Patient/Symptom-Focused ===\n")
results_B <- search_pubmed(
search_terms = strategy_B$terms,
max_results = 150,
date_range = strategy_B$date_range
)
cat("\nStrategy B completed. Retrieved", nrow(results_B), "articles.\n\n")
# Standardize both result sets
cat("Standardizing search results...\n")
standardized_A <- std_search_results(results_A, source_format = "pubmed")
standardized_B <- std_search_results(results_B, source_format = "pubmed")
# Add strategy identifiers
standardized_A$strategy <- "Clinical_Terminology"
standardized_B$strategy <- "Patient_Symptom_Focused"
# Detect duplicates within each strategy
dedup_A <- detect_dupes(standardized_A, method = "exact")
dedup_B <- detect_dupes(standardized_B, method = "exact")
cat("Strategy A - Total:", nrow(dedup_A), "Unique:", sum(!dedup_A$duplicate), "Duplicates:", sum(dedup_A$duplicate), "\n")
cat("Strategy B - Total:", nrow(dedup_B), "Unique:", sum(!dedup_B$duplicate), "Duplicates:", sum(dedup_B$duplicate), "\n\n")
# Create combined gold standard for comparison
# In practice, this would be your known relevant articles
# Here we'll create a more sophisticated gold standard based on high-confidence matches
cat("Creating enhanced gold standard...\n")
# High-confidence terms that indicate long COVID relevance
high_confidence_patterns <- c(
"long covid", "post-covid", "post-acute covid", "persistent covid",
"covid sequelae", "long haul", "chronic covid", "post covid syndrome"
)
# Articles that appear in both strategies (high confidence)
overlap_ids <- intersect(dedup_A$id[!dedup_A$duplicate], dedup_B$id[!dedup_B$duplicate])
# Articles with multiple high-confidence patterns in title
multi_pattern_A <- dedup_A[!dedup_A$duplicate, ] %>%
filter(rowSums(sapply(high_confidence_patterns, function(p) grepl(p, tolower(title)))) >= 2) %>%
pull(id)
multi_pattern_B <- dedup_B[!dedup_B$duplicate, ] %>%
filter(rowSums(sapply(high_confidence_patterns, function(p) grepl(p, tolower(title)))) >= 2) %>%
pull(id)
# Combine for gold standard
gold_standard_ids <- unique(c(overlap_ids, multi_pattern_A, multi_pattern_B))
cat("Gold standard created with", length(gold_standard_ids), "high-confidence relevant articles\n")
cat("- Overlap between strategies:", length(overlap_ids), "articles\n")
cat("- Strategy A multi-pattern matches:", length(multi_pattern_A), "articles\n")
cat("- Strategy B multi-pattern matches:", length(multi_pattern_B), "articles\n\n")
# Initialize analyzers for both strategies
cat("Initializing SearchAnalyzers for comparison...\n")
analyzer_A <- SearchAnalyzer$new(
search_results = filter(dedup_A, !duplicate),
gold_standard = gold_standard_ids,
search_strategy = strategy_A
)
analyzer_B <- SearchAnalyzer$new(
search_results = filter(dedup_B, !duplicate),
gold_standard = gold_standard_ids,
search_strategy = strategy_B
)
# Calculate comprehensive metrics for both strategies
cat("Calculating performance metrics...\n")
metrics_A <- analyzer_A$calculate_metrics()
metrics_B <- analyzer_B$calculate_metrics()
# Compare strategies using the comparison framework
cat("Performing statistical comparison...\n")
unique_A_ids <- filter(dedup_A, !duplicate)$id
unique_B_ids <- filter(dedup_B, !duplicate)$id
comparison_result <- compare_strategies(
strategy1_results = unique_A_ids,
strategy2_results = unique_B_ids,
gold_standard = gold_standard_ids,
test_type = "mcnemar"
)
# Display comprehensive comparison results
cat("\n=== COMPREHENSIVE STRATEGY COMPARISON RESULTS ===\n\n")
cat("STRATEGY A (Clinical Terminology) PERFORMANCE:\n")
cat("Total Articles Retrieved:", nrow(filter(dedup_A, !duplicate)), "\n")
if (!is.null(metrics_A$precision_recall$precision)) {
cat("Precision:", round(metrics_A$precision_recall$precision, 3), "\n")
cat("Recall:", round(metrics_A$precision_recall$recall, 3), "\n")
cat("F1 Score:", round(metrics_A$precision_recall$f1_score, 3), "\n")
cat("Number Needed to Read:", round(metrics_A$precision_recall$number_needed_to_read, 1), "\n")
}
cat("\nSTRATEGY B (Patient/Symptom-Focused) PERFORMANCE:\n")
cat("Total Articles Retrieved:", nrow(filter(dedup_B, !duplicate)), "\n")
if (!is.null(metrics_B$precision_recall$precision)) {
cat("Precision:", round(metrics_B$precision_recall$precision, 3), "\n")
cat("Recall:", round(metrics_B$precision_recall$recall, 3), "\n")
cat("F1 Score:", round(metrics_B$precision_recall$f1_score, 3), "\n")
cat("Number Needed to Read:", round(metrics_B$precision_recall$number_needed_to_read, 1), "\n")
}
cat("\nSTATISTICAL COMPARISON RESULTS:\n")
cat("Test Used:", comparison_result$test, "\n")
cat("P-value:", round(comparison_result$p_value, 4), "\n")
cat("Statistically Significant:", comparison_result$significant, "\n")
if (!is.null(comparison_result$difference)) {
cat("\nPERFORMANCE DIFFERENCES (B - A):\n")
cat("Precision Difference:", round(comparison_result$difference$precision_diff, 3), "\n")
cat("Recall Difference:", round(comparison_result$difference$recall_diff, 3), "\n")
cat("F1 Score Difference:", round(comparison_result$difference$f1_diff, 3), "\n")
}
# Analyze overlap and unique contributions
cat("\nOVERLAP ANALYSIS:\n")
total_unique_combined <- length(union(unique_A_ids, unique_B_ids))
overlap_count <- length(intersect(unique_A_ids, unique_B_ids))
unique_to_A <- length(setdiff(unique_A_ids, unique_B_ids))
unique_to_B <- length(setdiff(unique_B_ids, unique_A_ids))
cat("Total Unique Articles (Combined):", total_unique_combined, "\n")
cat("Overlap Between Strategies:", overlap_count, "\n")
cat("Unique to Strategy A:", unique_to_A, "\n")
cat("Unique to Strategy B:", unique_to_B, "\n")
cat("Overlap Percentage:", round((overlap_count / total_unique_combined) * 100, 1), "%\n")
# Create enhanced visualizations for comparison
cat("\nGenerating comparative visualizations...\n")
# 1. Side-by-side performance overview
overview_A <- analyzer_A$visualize_performance("overview") +
ggtitle("Strategy A: Clinical Terminology") +
theme(plot.title = element_text(size = 12))
overview_B <- analyzer_B$visualize_performance("overview") +
ggtitle("Strategy B: Patient/Symptom-Focused") +
theme(plot.title = element_text(size = 12))
combined_overview <- overview_A + overview_B +
plot_annotation(title = "Search Strategy Performance Comparison",
subtitle = "Long COVID Search Strategies")
print(combined_overview)
# 2. Temporal comparison
temporal_A <- analyzer_A$visualize_performance("temporal") +
ggtitle("Strategy A: Temporal Distribution") +
theme(plot.title = element_text(size = 12))
temporal_B <- analyzer_B$visualize_performance("temporal") +
ggtitle("Strategy B: Temporal Distribution") +
theme(plot.title = element_text(size = 12))
combined_temporal <- temporal_A + temporal_B +
plot_annotation(title = "Temporal Distribution Comparison")
print(combined_temporal)
devtools::load_all(".")
# Load required packages
library(searchAnalyzeR)
library(rentrez)  # For PubMed API access
library(xml2)     # For XML parsing
library(dplyr)
library(ggplot2)
library(lubridate)
library(patchwork)  # For combining plots
# Set up the comparative analysis
cat("=== searchAnalyzeR: Search Strategy Comparison Example ===\n")
cat("Topic: Long-term effects of COVID-19 (Long COVID)\n")
cat("Objective: Compare two semantically related search strategies\n\n")
# Define two different search strategies for comparison
strategy_A <- list(
name = "Clinical Terminology Strategy",
terms = c(
"post-covid syndrome",
"covid-19 sequelae",
"post-acute covid-19",
"long haul covid",
"covid long haulers"
),
description = "Uses formal clinical terminology and established medical terms",
databases = c("PubMed"),
date_range = as.Date(c("2020-01-01", "2024-12-31")),
filters = list(
language = "English",
article_types = c("Journal Article", "Review", "Clinical Trial")
),
search_date = Sys.time()
)
strategy_B <- list(
name = "Patient/Symptom-Focused Strategy",
terms = c(
"long covid",
"persistent covid symptoms",
"chronic covid symptoms",
"post covid fatigue",
"covid recovery complications"
),
description = "Uses patient-centered language and symptom-based terminology",
databases = c("PubMed"),
date_range = as.Date(c("2020-01-01", "2024-12-31")),
filters = list(
language = "English",
article_types = c("Journal Article", "Review", "Clinical Trial")
),
search_date = Sys.time()
)
cat("Strategy A (Clinical Terminology):\n")
cat("Terms:", paste(strategy_A$terms, collapse = " OR "), "\n")
cat("Description:", strategy_A$description, "\n\n")
cat("Strategy B (Patient/Symptom-Focused):\n")
cat("Terms:", paste(strategy_B$terms, collapse = " OR "), "\n")
cat("Description:", strategy_B$description, "\n\n")
# Execute searches for both strategies
cat("=== EXECUTING STRATEGY A: Clinical Terminology ===\n")
results_A <- search_pubmed(
search_terms = strategy_A$terms,
max_results = 150,
date_range = strategy_A$date_range
)
cat("\nStrategy A completed. Retrieved", nrow(results_A), "articles.\n\n")
cat("=== EXECUTING STRATEGY B: Patient/Symptom-Focused ===\n")
results_B <- search_pubmed(
search_terms = strategy_B$terms,
max_results = 150,
date_range = strategy_B$date_range
)
cat("\nStrategy B completed. Retrieved", nrow(results_B), "articles.\n\n")
# Standardize both result sets
cat("Standardizing search results...\n")
standardized_A <- std_search_results(results_A, source_format = "pubmed")
standardized_B <- std_search_results(results_B, source_format = "pubmed")
# Add strategy identifiers
standardized_A$strategy <- "Clinical_Terminology"
standardized_B$strategy <- "Patient_Symptom_Focused"
# Detect duplicates within each strategy
dedup_A <- detect_dupes(standardized_A, method = "exact")
dedup_B <- detect_dupes(standardized_B, method = "exact")
cat("Strategy A - Total:", nrow(dedup_A), "Unique:", sum(!dedup_A$duplicate), "Duplicates:", sum(dedup_A$duplicate), "\n")
cat("Strategy B - Total:", nrow(dedup_B), "Unique:", sum(!dedup_B$duplicate), "Duplicates:", sum(dedup_B$duplicate), "\n\n")
# Create combined gold standard for comparison
# In practice, this would be your known relevant articles
# Here we'll create a more sophisticated gold standard based on high-confidence matches
cat("Creating enhanced gold standard...\n")
# High-confidence terms that indicate long COVID relevance
high_confidence_patterns <- c(
"long covid", "post-covid", "post-acute covid", "persistent covid",
"covid sequelae", "long haul", "chronic covid", "post covid syndrome"
)
# Articles that appear in both strategies (high confidence)
overlap_ids <- intersect(dedup_A$id[!dedup_A$duplicate], dedup_B$id[!dedup_B$duplicate])
# Articles with multiple high-confidence patterns in title
multi_pattern_A <- dedup_A[!dedup_A$duplicate, ] %>%
filter(rowSums(sapply(high_confidence_patterns, function(p) grepl(p, tolower(title)))) >= 2) %>%
pull(id)
multi_pattern_B <- dedup_B[!dedup_B$duplicate, ] %>%
filter(rowSums(sapply(high_confidence_patterns, function(p) grepl(p, tolower(title)))) >= 2) %>%
pull(id)
# Combine for gold standard
gold_standard_ids <- unique(c(overlap_ids, multi_pattern_A, multi_pattern_B))
cat("Gold standard created with", length(gold_standard_ids), "high-confidence relevant articles\n")
cat("- Overlap between strategies:", length(overlap_ids), "articles\n")
cat("- Strategy A multi-pattern matches:", length(multi_pattern_A), "articles\n")
cat("- Strategy B multi-pattern matches:", length(multi_pattern_B), "articles\n\n")
# Initialize analyzers for both strategies
cat("Initializing SearchAnalyzers for comparison...\n")
analyzer_A <- SearchAnalyzer$new(
search_results = filter(dedup_A, !duplicate),
gold_standard = gold_standard_ids,
search_strategy = strategy_A
)
analyzer_B <- SearchAnalyzer$new(
search_results = filter(dedup_B, !duplicate),
gold_standard = gold_standard_ids,
search_strategy = strategy_B
)
# Calculate comprehensive metrics for both strategies
cat("Calculating performance metrics...\n")
metrics_A <- analyzer_A$calculate_metrics()
metrics_B <- analyzer_B$calculate_metrics()
# Compare strategies using the comparison framework
cat("Performing statistical comparison...\n")
unique_A_ids <- filter(dedup_A, !duplicate)$id
unique_B_ids <- filter(dedup_B, !duplicate)$id
comparison_result <- compare_strategies(
strategy1_results = unique_A_ids,
strategy2_results = unique_B_ids,
gold_standard = gold_standard_ids,
test_type = "mcnemar"
)
# Display comprehensive comparison results
cat("\n=== COMPREHENSIVE STRATEGY COMPARISON RESULTS ===\n\n")
cat("STRATEGY A (Clinical Terminology) PERFORMANCE:\n")
cat("Total Articles Retrieved:", nrow(filter(dedup_A, !duplicate)), "\n")
if (!is.null(metrics_A$precision_recall$precision)) {
cat("Precision:", round(metrics_A$precision_recall$precision, 3), "\n")
cat("Recall:", round(metrics_A$precision_recall$recall, 3), "\n")
cat("F1 Score:", round(metrics_A$precision_recall$f1_score, 3), "\n")
cat("Number Needed to Read:", round(metrics_A$precision_recall$number_needed_to_read, 1), "\n")
}
cat("\nSTRATEGY B (Patient/Symptom-Focused) PERFORMANCE:\n")
cat("Total Articles Retrieved:", nrow(filter(dedup_B, !duplicate)), "\n")
if (!is.null(metrics_B$precision_recall$precision)) {
cat("Precision:", round(metrics_B$precision_recall$precision, 3), "\n")
cat("Recall:", round(metrics_B$precision_recall$recall, 3), "\n")
cat("F1 Score:", round(metrics_B$precision_recall$f1_score, 3), "\n")
cat("Number Needed to Read:", round(metrics_B$precision_recall$number_needed_to_read, 1), "\n")
}
cat("\nSTATISTICAL COMPARISON RESULTS:\n")
cat("Test Used:", comparison_result$test, "\n")
cat("P-value:", round(comparison_result$p_value, 4), "\n")
cat("Statistically Significant:", comparison_result$significant, "\n")
if (!is.null(comparison_result$difference)) {
cat("\nPERFORMANCE DIFFERENCES (B - A):\n")
cat("Precision Difference:", round(comparison_result$difference$precision_diff, 3), "\n")
cat("Recall Difference:", round(comparison_result$difference$recall_diff, 3), "\n")
cat("F1 Score Difference:", round(comparison_result$difference$f1_diff, 3), "\n")
}
# Analyze overlap and unique contributions
cat("\nOVERLAP ANALYSIS:\n")
total_unique_combined <- length(union(unique_A_ids, unique_B_ids))
overlap_count <- length(intersect(unique_A_ids, unique_B_ids))
unique_to_A <- length(setdiff(unique_A_ids, unique_B_ids))
unique_to_B <- length(setdiff(unique_B_ids, unique_A_ids))
cat("Total Unique Articles (Combined):", total_unique_combined, "\n")
cat("Overlap Between Strategies:", overlap_count, "\n")
cat("Unique to Strategy A:", unique_to_A, "\n")
cat("Unique to Strategy B:", unique_to_B, "\n")
cat("Overlap Percentage:", round((overlap_count / total_unique_combined) * 100, 1), "%\n")
# Create enhanced visualizations for comparison
cat("\nGenerating comparative visualizations...\n")
# 1. Side-by-side performance overview
overview_A <- analyzer_A$visualize_performance("overview") +
ggtitle("Strategy A: Clinical Terminology") +
theme(plot.title = element_text(size = 12))
overview_B <- analyzer_B$visualize_performance("overview") +
ggtitle("Strategy B: Patient/Symptom-Focused") +
theme(plot.title = element_text(size = 12))
combined_overview <- overview_A + overview_B +
plot_annotation(title = "Search Strategy Performance Comparison",
subtitle = "Long COVID Search Strategies")
print(combined_overview)
# 2. Temporal comparison
temporal_A <- analyzer_A$visualize_performance("temporal") +
ggtitle("Strategy A: Temporal Distribution") +
theme(plot.title = element_text(size = 12))
